// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(20)
  lastName  String   @db.VarChar(30)
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role[]   @default([User])

  stores Store[]
}

model Store {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(30)
  ownerId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner      User        @relation(fields: [ownerId], references: [id])
  categories Category[]
  sizes      Size[]
  colors     Color[]
  billboards Billboard[]
  products   Product[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(20)
  storeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  product Product[]

  @@unique([storeId, name])
}

model Size {
  id        Int      @id @default(autoincrement())
  label     String   @db.VarChar(20)
  desc      String?
  storeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store    Store     @relation(fields: [storeId], references: [id])
  products Product[]

  @@unique([storeId, label])
}

model Color {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(20)
  hexCode   String   @db.VarChar(7)
  storeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([storeId, hexCode, name])
}

model Billboard {
  id         Int      @id @default(autoincrement())
  storeId    Int
  imageId    Int      @unique
  isFeatured Boolean  @default(true)
  createdAt  DateTime @default(now())

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  image File  @relation(fields: [imageId], references: [id], onDelete: Cascade)
}

model File {
  id        Int    @id @default(autoincrement())
  filename  String
  path      String
  mimetype  String
  productId Int?

  billboard Billboard?
  product   Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(120)
  price      Int
  desc       String?
  storeId    Int
  categoryId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  images   File[]
  sizes    Size[]
  colors   Color[]
  category Category @relation(references: [id], fields: [categoryId])
  store    Store    @relation(references: [id], fields: [storeId], onDelete: Cascade)
}

model ProductsOnSizesColors {
  sizeId    Int
  colorId   Int
  productId Int
  qty       Int

  @@id([sizeId, colorId, productId])
}

enum Role {
  User
  Admin
}
